 /*
 * Copyright (C) 2007,2008 Cambio Healthcare Systems AB, Sweden
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.txt
 *
 */options{  STATIC = false;  DEBUG_PARSER = false;  DEBUG_TOKEN_MANAGER = false;  DEBUG_LOOKAHEAD = false;  LOOKAHEAD= 1;  UNICODE_INPUT = true;}PARSER_BEGIN(DADLParser)package org.openehr.am.parser;import java.io.*;import java.util.*;import java.text.*;import org.openehr.rm.support.basic.Interval;import org.openehr.rm.datatypes.quantity.datetime.*;import org.openehr.rm.datatypes.text.*;import org.openehr.rm.datatypes.quantity.*;import org.openehr.rm.common.resource.*;import org.openehr.rm.common.generic.RevisionHistory;import org.openehr.rm.support.identification.*;import org.openehr.rm.support.terminology.*;/**
 * JavaCC grammer file for Archteype Definition Language (ADL)
 *
 * Targeted DADL revision 1.4
 *
 * Included uriGrammarFragment.txt from Gregory Kick
 *
 * @author Rong Chen (rong.acode@gmail.com)
 * @version 1.4
 */public class DADLParser{  /* static fields */  private static final String CHARSET = "UTF-8";  private static final String ATTRIBUTE_UNKNOWN = "__unknown__";  /* =======================  public constructors  ======================== */  /* Constructor that takes file as input */  public DADLParser(File file) throws IOException  {    this (new FileInputStream(file), CHARSET);  }  /* Constructor that takes string as input */  public DADLParser(String value)  {    this (new BufferedReader(new StringReader(value)));  }  /* =========================  public interface ======================== */  /* execute the parsing */  public ContentObject parse() throws ParseException  {    return input();  }  /* re-initial the parser */  public void reInit(File file) throws IOException  {    ReInit(new FileInputStream(file), CHARSET);  }  /* re-initial the parser */  public void reInit(InputStream input) throws IOException  {    ReInit(new BufferedInputStream(input));  }}PARSER_END(DADLParser)<* >SKIP : /* WHITE SPACE */{  " "| "\t"| "\n"| "\r"| "\f"| "\ufeff" /* UTF-8 Byte Order Mark */}<* >SPECIAL_TOKEN : /* COMMENTS */{  < SINGLE_LINE_COMMENT : "--" (~[ "\n", "\r" ])* >}<* >TOKEN [ IGNORE_CASE ] : /* KEYWORDS - dADL */{  < SYM_TRUE : "true" >| < SYM_FALSE : "false" >}<* >TOKEN : /* SYMBOLS - common */{  < SYM_MINUS : "-" >| < SYM_PLUS : "+" >| < SYM_STAR : "*" >| < SYM_SLASH : "/" >| < SYM_CARET : "^" >| < SYM_DOT : "." >| < SYM_SEMICOLON : ";" >| < SYM_COMMA : "," >| < SYM_TWO_COLONS : "::" >| < SYM_COLON : ":" >| < SYM_EXCLAMATION : "!" >| < SYM_L_PARENTHESIS : "(" >| < SYM_R_PARENTHESIS : ")" >| < SYM_DOLLAR : "$" >| < SYM_QUESTION : "?" >| < SYM_L_BRACKET : "[" >| < SYM_R_BRACKET : "]" >| < SYM_INTERVAL_DELIM : "|" >| < SYM_EQ : "=" >| < SYM_GE : ">=" >| < SYM_LE : "<=" >| < SYM_LT : "<" >| < SYM_GT : ">" >| < SYM_NE : "!=" >| < SYM_MODULO : "\\" >| < SYM_DIV : "//" >| < SYM_ELLIPSIS : ".." >| < SYM_LIST_CONTINUE : "..." >| < SYM_C_DV_ORDINAL : "C_DV_ORDINAL" >}<* >TOKEN : /* LOCAL TOKENS */{  < #DIG : [ "0"-"9" ] >| < #LET_DIG : [ "a"-"z", "A"-"Z", "0"-"9" ] >| < #LET_DIG_DD :    < LET_DIG >  | "."  | "-" >| < #LET_DIG_U :    < LET_DIG >  | "_" >| < #LET_DIG_DU :    < LET_DIG_U >  | "-" >| < #LET_DIG_DUDS :    < LET_DIG_DU >  | "."  | "\\" >| < #LET_DIG_DUDSLR :    < LET_DIG_DUDS >  | "("  | ")" >}/* -------------------- TOKEN - dADL & cADL ------------------------- */<* >TOKEN : /* VALUES - dADL & cADL */{  < V_ISO8601_DURATION :    ("-")? "P"    (      (< DIG >)+ [ "m", "M" ]    )?    (      (< DIG >)+ [ "w", "W" ]    )?    (      (< DIG >)+ [ "d", "D" ]    )?    (      "T"      (        (< DIG >)+ [ "h", "H" ]      )?      (        (< DIG >)+ [ "m", "M" ]      )?      (        (< DIG >)+ [ "s", "S" ]      )?    )? >| < V_TYPE_IDENTIFIER : [ "A"-"Z" ] (< LET_DIG_U >)* >| < V_GENERIC_TYPE_IDENTIFIER :    [ "A"-"Z" ] (< LET_DIG_U >)* "<"    (      < LET_DIG_U >    | ","    | "<"    | ">"    )+    ">" >| < V_ATTRIBUTE_IDENTIFIER : [ "a"-"z" ] (< LET_DIG_U >)* >| < #V_LOCAL_CODE_CORE : "a" [ "c", "t" ] ([ "0"-"9", "." ])+ >| < V_INTEGER :    (< DIG >)+  | (< DIG >)    {      1, 3    }    (      "," (< DIG >)      {        3      }    )+ >| < V_REAL :    (< DIG >)+ "./" ~[ ".", "0"-"9" ]  | (< DIG >)+ "." (< DIG >)* [ "e", "E" ] ([ "+", "-" ])? (< DIG >)+  | (< DIG >)* "." (< DIG >)+    (      [ "e", "E" ] ([ "+", "-" ])? (< DIG >)+    )?  | (< DIG >)    {      1, 3    }    (      "_" (< DIG >)      {        3      }    )+    "./" ~[ ".", "0"-"9" ]  | (< DIG >)    {      1, 3    }    (      "_" (< DIG >)      {        3      }    )*    "."    (      (< DIG >)      {        1, 3      }      (        "_" (< DIG >)        {          3        }      )*    )?    [ "e", "E" ] ([ "+", "-" ])? (< DIG >)    {      1, 3    }    (      "_" (< DIG >)      {        3      }    )*  |    (      (< DIG >)      {        1, 3      }      (        "_" (< DIG >)        {          3        }      )*    )?    "." (< DIG >)    {      1, 3    }    (      "_" (< DIG >)      {        3      }    )*    (      [ "e", "E" ] ([ "+", "-" ])? (< DIG >)      {        1, 3      }      (        "_" (< DIG >)        {          3        }      )*    )? >| < V_STRING :    "\""    (      (        "\\\"" (~[ "\"", "\n", "\\" ])*      )    |      (        "\n" ([ "\r", " ", "\t" ])*      )    | (~[ "\\", "\n", "\"" ])*    )*    "\"" >| < V_LOCAL_CODE_PATH :    "\"[" < V_LOCAL_CODE_CORE > "]/"    (      < V_ATTRIBUTE_IDENTIFIER > ("/" < V_ATTRIBUTE_IDENTIFIER >)* "[" < V_LOCAL_CODE_CORE > "]/"    )*    "\"" >| < V_CHARACTER :    "'" ~[ "\\", "\n", "'" ] "'"  | < CHAR_REF > >| < V_DATE :    ([ "0"-"9" ])    {      4    }    "-"    (      "0" [ "1"-"9" ]    | "1" [ "0"-"2" ]    )    "-"    (      "0" [ "1"-"9" ]    | [ "1"-"2" ] [ "0"-"9" ]    | "3" [ "0"-"1" ]    ) >| < V_HHMM_TIME : < HOUR_MINUTE > >| < V_HHMMSS_TIME : < HOUR_MINUTE > < SECOND > >| < V_HHMMSSss_TIME : < HOUR_MINUTE > < SECOND > < MILLI_SECOND > >| < V_HHMMSSZ_TIME : < HOUR_MINUTE > < SECOND > < TIME_ZONE > >| < V_HHMMSSssZ_TIME : < HOUR_MINUTE > < SECOND > < MILLI_SECOND > < TIME_ZONE > >| < V_DATE_TIME : < V_DATE > "T" < HOUR_MINUTE > < SECOND > >| < V_DATE_TIME_MS : < V_DATE_TIME > < MILLI_SECOND > >| < V_DATE_TIME_Z : < V_DATE_TIME > < TIME_ZONE > >| < V_DATE_TIME_MSZ : < V_DATE_TIME > < MILLI_SECOND > < TIME_ZONE > >| < #TIME_ZONE :    [ "-", "+" ] ([ "0"-"9" ])    {      4    }  | "Z" >| < #SECOND : ":" [ "0"-"5" ] [ "0"-"9" ] >| < #MILLI_SECOND : "." ([ "0"-"9" ])    {      2, 3    }    >| < #HOUR_MINUTE : [ "0"-"9" ] [ "0"-"9" ] ":" [ "0"-"5" ] [ "0"-"9" ] >| < #CHAR_REF :    "'&"    (      ([ "a"-"z", "A"-"Z" ])+    | "#"      (        ([ "0"-"9" ])+      | "x" ([ "0"-"9", "a"-"f", "A"-"F" ])+      )    )    ";'" >| < V_CODE_PHRASE : "[" (< LET_DIG_DUDSLR >)+ "::" (< LET_DIG_DUDS >)+ "]" >}<* >TOKEN : /* VALUES - dADL */{  < V_QUALIFIED_TERM_CODE_REF : "[" (< LET_DIG_DUDSLR >)+ "::" (< LET_DIG_DUDS >)+ "]" >}/*****************************************
 * THE dADL LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/ContentObject input() :{  ContentObject obj;  List < AttributeValue > attributeValues = null;  ComplexObjectBlock complexObjectBlock = null;}{  (    LOOKAHEAD(2)    attributeValues = attr_vals()  | LOOKAHEAD(2)    complexObjectBlock = complex_object_block()  )  {    obj = new ContentObject(attributeValues, complexObjectBlock);    return obj;  }}ComplexObjectBlock complex_object_block() :{  ComplexObjectBlock obj;}{  (    LOOKAHEAD(single_attr_object_block())    obj = single_attr_object_block()  | LOOKAHEAD(multiple_attr_object_block())    obj = multiple_attr_object_block()  )  {    return obj;  }}SingleAttributeObjectBlock single_attr_object_block() :{  String type = null;  List < AttributeValue > values = Collections.EMPTY_LIST;}{  [ type = type_identifier() ] < SYM_LT > [ values = attr_vals() ] < SYM_GT >  {    return new SingleAttributeObjectBlock(type, values);  }}MultipleAttributeObjectBlock multiple_attr_object_block() :{  String type = null;  KeyedObject obj;  List < KeyedObject > keyedObjects = new ArrayList < KeyedObject > ();}{  [ type = type_identifier() ] < SYM_LT >  (    obj = keyed_object()    {      keyedObjects.add(obj);    }  )+  < SYM_GT >  {    return new MultipleAttributeObjectBlock(type, keyedObjects);  }}KeyedObject keyed_object() :{  SimpleValue key;  ObjectBlock object;}{  key = object_key() < SYM_EQ > object = object_block()  {    return new KeyedObject(key, object);  }}SimpleValue object_key() :{  SimpleValue key;}{  < SYM_L_BRACKET > key = simple_value() < SYM_R_BRACKET >  {    return key;  }}ObjectBlock object_block() :{  ObjectBlock object;}{  (    LOOKAHEAD(complex_object_block())    object = complex_object_block()  | LOOKAHEAD(primitive_object_block())    object = primitive_object_block()  )  {    return object;  }}PrimitiveObjectBlock primitive_object_block() :{  String type = null;  SimpleValue simpleValue = null;  List < SimpleValue > simpleListValue = null;  Interval < Comparable > simpleIntervalValue = null;  String termCode = null;  List < String > termCodeList = null;}{  [ type = type_identifier() ] < SYM_LT >  (    LOOKAHEAD(2)    simpleListValue = simple_list_value()  | LOOKAHEAD(2)    simpleValue = simple_value()  | simpleIntervalValue = simple_interval_value()  | LOOKAHEAD(2)    termCode = term_code()  | LOOKAHEAD(2)    termCodeList = term_code_list_value()  )  < SYM_GT >  {    return new PrimitiveObjectBlock(type, simpleValue, simpleListValue, simpleIntervalValue, termCode, termCodeList);  }}List < AttributeValue > attr_vals() :{  List < AttributeValue > list = new ArrayList < AttributeValue > ();  AttributeValue av;}{  av = attr_val()  {    list.add(av);  }  (    (";")? av = attr_val()    {      list.add(av);    }  )*  {    return list;  }}AttributeValue attr_val() :{  String id;  ObjectBlock value;}{  id = attribute_identifier() < SYM_EQ > value = object_block()  {    return new AttributeValue(id, value);  }}SimpleValue simple_value() :{  SimpleValue value;  DvDateTime datetime = null;  DvDate date = null;  DvTime time = null;  DvDuration duration = null;  int i = 0;  double d = 0;  boolean b = false;  char c = 0;  String str = null;  CodePhrase cp = null;}{  (    LOOKAHEAD(date_time_value())    datetime = date_time_value()    {      value = new DateTimeValue(datetime);    }  | LOOKAHEAD(date_value())    date = date_value()    {      value = new DateValue(date);    }  | LOOKAHEAD(time_value())    time = time_value()    {      value = new TimeValue(time);    }  | LOOKAHEAD(duration_value())    duration = duration_value()    {      value = new DurationValue(duration);    }  | LOOKAHEAD(real_value())    d = real_value()    {      value = new RealValue(new Double(d));    }  | LOOKAHEAD(integer_value())    i = integer_value()    {      value = new IntegerValue(new Integer(i));    }  | b = boolean_value()    {      value = new BooleanValue(new Boolean(b));    }  | c = character_value()    {      value = new CharacterValue(new Character(c));    }  | cp = code_phrase()    {      value = new CodeValue(cp);    }  | LOOKAHEAD(string_value())    str = string_value()    {      value = new StringValue(str);    }  )  {    return value;  }}List simple_list_value() :{  List list;}{  (    LOOKAHEAD(time_list_value())    list = time_list_value()  | LOOKAHEAD(date_list_value())    list = date_list_value()  | LOOKAHEAD(date_time_list_value())    list = date_time_list_value()  | LOOKAHEAD(duration_list_value())    list = duration_list_value()  | LOOKAHEAD(integer_list_value())    list = integer_list_value()  | LOOKAHEAD(real_list_value())    list = real_list_value()  | list = boolean_list_value()  | list = character_list_value()  | list = string_list_value()  | list = code_phrase_list_value()  )  {    return list;  }}Interval < Comparable > simple_interval_value() :{  Interval < Comparable > i;}{  (    LOOKAHEAD(date_interval_value())    i = date_interval_value()  | LOOKAHEAD(time_interval_value())    i = time_interval_value()  | LOOKAHEAD(date_time_interval_value())    i = date_time_interval_value()  | LOOKAHEAD(duration_interval_value())    i = duration_interval_value()  | LOOKAHEAD(real_interval_value())    i = real_interval_value()  | LOOKAHEAD(integer_interval_value())    i = integer_interval_value()  )  {    return i;  }}String string_value() :{  Token t;  String value;}{  t = < V_STRING >  {    value = t.image;  }  {    return value.substring(1, value.length() - 1);  }}List index_string_list() :{  List list = new ArrayList();  String value = null;  String index = null; // not used
}{  (    < SYM_L_BRACKET > index = string_value() < SYM_R_BRACKET > < SYM_EQ > < SYM_LT >    (      value = string_value()    )    {      list.add(value);    }    < SYM_GT >  )*  {    return list.isEmpty() ? null : list;  }}List string_list_value() :{  List list = new ArrayList();  String value;}{  value = string_value()  {    list.add(new StringValue(value));  }  (    LOOKAHEAD(2)    ","    (      value = string_value()      {        list.add(new StringValue(value));      }    | < SYM_LIST_CONTINUE >    )  )+  {    return list;  }}int integer_value() :{  int i;  boolean negative = false;}{  [    (      "+"    | "-"      {        negative = true;      }    )  ]  i = positive_int_value()  {    if (negative)    {      i = - i;    }    return i;  }}int positive_int_value() :{  Token t;}{  t = < V_INTEGER >  {    try    {      return Integer.parseInt(t.image);    }    catch (NumberFormatException e)    {      throw new ParseException("Wrong format of integer: " + t.image);    }  }}List integer_list_value() :{  List list = new ArrayList();  int i;}{  i = integer_value()  {    list.add(new Integer(i));  }  (    ","    (      i = integer_value()      {        list.add(new Integer(i));      }    | < SYM_LIST_CONTINUE >    )  )+  {    return list;  }}List code_phrase_list_value() :{  List list = new ArrayList();  CodePhrase cp = null;}{  cp = code_phrase()  {    list.add(new CodeValue(cp));  }  (    ","    (      cp = code_phrase()      {        list.add(new CodeValue(cp));      }    | < SYM_LIST_CONTINUE >    )  )+  {    return list;  }}Interval integer_interval_value() :{  Interval i = null;  int lower = 0;  int upper = 0;}{  < SYM_INTERVAL_DELIM >  (    LOOKAHEAD(3)    {      boolean lowerInclusive = true;      boolean upperInclusive = true;      boolean upperSpecified = false;    }    [      < SYM_GT >      {        lowerInclusive = false;      }    ]    lower = integer_value()    {      upper = lower;    }    [      < SYM_ELLIPSIS >      [        < SYM_LT >        {          upperInclusive = false;        }      ]      upper = integer_value()      {        upperSpecified = true;      }    ]    {      if (!lowerInclusive && !upperSpecified)      {        // specical case for |>100|
        i = new Interval(new Integer(lower), null, false, false);      }      else      {        i = new Interval(new Integer(lower), new Integer(upper), lowerInclusive, upperInclusive);      }    }  | < SYM_LT > upper = integer_value()    {      i = new Interval(null, new Integer(upper), false, false);    }  | < SYM_GT > lower = integer_value()    {      i = new Interval(new Integer(lower), null, false, false);    }  | < SYM_LE > upper = integer_value()    {      i = new Interval(null, new Integer(upper), false, true);    }  | < SYM_GE > lower = integer_value()    {      i = new Interval(new Integer(lower), null, true, false);    }  )  < SYM_INTERVAL_DELIM >  {    return i;  }}CodePhrase code_phrase() :{  Token t;  String lang = null;  String langTerm = null;  String langCode = null;}{  t = < V_CODE_PHRASE >  {    lang = t.image;    int i = lang.indexOf("::");    langTerm = lang.substring(1, i);    langCode = lang.substring(i + 2, lang.length() - 1);  }  {    return new CodePhrase(langTerm, langCode);  }}double real_value() :{  Token t;  double d;  boolean negative = false;}{  [    (      "+"    | "-"      {        negative = true;      }    )  ]  t = < V_REAL >  {    try    {      d = Double.parseDouble(t.image);    }    catch (NumberFormatException e)    {      throw new ParseException("Wrong format of double: " + t.image);    }    if (negative)    {      d = - d;    }    return d;  }}List real_list_value() :{  List list = new ArrayList();  double d;}{  d = real_value()  {    list.add(new Double(d));  }  (    ","    (      d = real_value()      {        list.add(new Double(d));      }    | < SYM_LIST_CONTINUE >    )  )+  {    return list;  }}Interval real_interval_value() :{  Interval i = null;  double upper = 0;  double lower = 0;}{  < SYM_INTERVAL_DELIM >  (    LOOKAHEAD(3)    {      boolean lowerInclusive = true;      boolean upperInclusive = true;      boolean upperSpecified = false;    }    [      < SYM_GT >      {        lowerInclusive = false;      }    ]    lower = real_value()    {      upper = lower;    }    [      < SYM_ELLIPSIS >      [        < SYM_LT >        {          upperInclusive = false;        }      ]      upper = real_value()      {        upperSpecified = true;      }    ]    {      if (!lowerInclusive && !upperSpecified)      {        // specical case for |>100.0|
        i = new Interval(new Double(lower), null, false, false);      }      else      {        i = new Interval(new Double(lower), new Double(upper), lowerInclusive, upperInclusive);      }    }  | < SYM_LT > upper = real_value()    {      i = new Interval(null, new Double(upper), false, false);    }  | < SYM_LE > upper = real_value()    {      i = new Interval(null, new Double(upper), false, true);    }  | < SYM_GT > lower = real_value()    {      i = new Interval(new Double(lower), null, false, false);    }  | < SYM_GE > lower = real_value()    {      i = new Interval(new Double(lower), null, true, false);    }  )  < SYM_INTERVAL_DELIM >  {    return i;  }}boolean boolean_value() :{}{  < SYM_TRUE >  {    return true;  }| < SYM_FALSE >  {    return false;  }}List boolean_list_value() :{  List list = new ArrayList();  boolean b;}{  b = boolean_value()  {    list.add(new Boolean(b));  }  (    ","    (      b = boolean_value()      {        list.add(new Boolean(b));      }    | < SYM_LIST_CONTINUE >    )  )+  {    return list;  }}char character_value() :{  Token t;}{  t = < V_CHARACTER >  {    return t.image.charAt(1);  }}List character_list_value() :{  List list = new ArrayList();  char c;}{  c = character_value()  {    list.add(new Character(c));  }  (    ","    (      c = character_value()      {        list.add(new Character(c));      }    | < SYM_LIST_CONTINUE >    )  )+  {    return list;  }}DvDate date_value() :{  Token t;}{  t = < V_DATE >  {    try    {      return new DvDate(t.image);    }    catch (Exception ignored)    {      throw new ParseException("wrong date format: " + t.image);    }  }}List date_list_value() :{  List list = new ArrayList();  DvDate d;}{  d = date_value()  {    list.add(d);  }  (    ","    (      d = date_value()      {        list.add(d);      }    | < SYM_LIST_CONTINUE >    )  )+  {    return list;  }}Interval date_interval_value() :{  Interval i;  DvDate lower = null;  DvDate upper = null;}{  < SYM_INTERVAL_DELIM >  (    lower = date_value()    {      upper = lower;    }    [ < SYM_ELLIPSIS > upper = date_value() ]    {      i = new Interval(lower, upper, true, true);    }  | < SYM_LT > upper = date_value()    {      i = new Interval(null, upper, false, false);    }  | < SYM_LE > upper = date_value()    {      i = new Interval(null, upper, false, true);    }  | < SYM_GT > lower = date_value()    {      i = new Interval(lower, null, false, false);    }  | < SYM_GE > lower = date_value()    {      i = new Interval(lower, null, true, false);    }  )  < SYM_INTERVAL_DELIM >  {    return i;  }}DvTime time_value() :{  Token t;  String pattern;}{  (    t = < V_HHMM_TIME >    {      pattern = "HH:mm";    }  | t = < V_HHMMSS_TIME >    {      pattern = "HH:mm:ss";    }  | t = < V_HHMMSSss_TIME >    {      pattern = "HH:mm:ss.SSS";    }  | t = < V_HHMMSSZ_TIME >    {      pattern = "HH:mm:ssZ";    }  | t = < V_HHMMSSssZ_TIME >    {      pattern = "HH:mm:ss.SSSZ";    }  )  {    try    {      return new DvTime(t.image);    }    catch (Exception e)    {      throw new ParseException("wrong date format: " + t.image);    }  }}List time_list_value() :{  List list = new ArrayList();  DvTime time;}{  time = time_value()  {    list.add(time);  }  (    ","    (      time = time_value()      {        list.add(time);      }    | < SYM_LIST_CONTINUE >    )  )+  {    return list;  }}Interval time_interval_value() :{  Interval i;  DvTime lower = null;  DvTime upper = null;}{  < SYM_INTERVAL_DELIM >  (    lower = time_value()    {      upper = lower;    }    [ < SYM_ELLIPSIS > upper = time_value() ]    {      i = new Interval(lower, upper, true, true);    }  | < SYM_LT > upper = time_value()    {      i = new Interval(null, upper, false, false);    }  | < SYM_LE > upper = time_value()    {      i = new Interval(null, upper, false, true);    }  | < SYM_GT > lower = time_value()    {      i = new Interval(lower, null, false, false);    }  | < SYM_GE > lower = time_value()    {      i = new Interval(lower, null, true, false);    }  )  < SYM_INTERVAL_DELIM >  {    return i;  }}DvDateTime date_time_value() :{  Token t;  String pattern;}{  (    t = < V_DATE_TIME >    {      pattern = "yyyy-MM-ddTHH:mm:ss";    }  | t = < V_DATE_TIME_MS >    {      pattern = "yyyy-MM-ddTHH:mm:ss.SSS";    }  | t = < V_DATE_TIME_Z >    {      pattern = "yyyy-MM-ddTHH:mm:ssZ";    }  | t = < V_DATE_TIME_MSZ >    {      pattern = "yyyy-MM-ddTHH:mm:ss.SSSZ";    }  )  {    try    {      return new DvDateTime(t.image);    }    catch (Exception e)    {      throw new ParseException("wrong datetime format: " + t.image);    }  }}List date_time_list_value() :{  List list = new ArrayList();  DvDateTime datetime;}{  datetime = date_time_value()  {    list.add(datetime);  }  (    ","    (      datetime = date_time_value()      {        list.add(datetime);      }    | < SYM_LIST_CONTINUE >    )  )+  {    return list;  }}Interval date_time_interval_value() :{  Interval i;  DvDateTime lower = null;  DvDateTime upper = null;}{  < SYM_INTERVAL_DELIM >  (    lower = date_time_value()    {      upper = lower;    }    [ < SYM_ELLIPSIS > upper = date_time_value() ]    {      i = new Interval(lower, upper, true, true);    }  | < SYM_LT > upper = date_time_value()    {      i = new Interval(null, upper, false, false);    }  | < SYM_LE > upper = date_time_value()    {      i = new Interval(null, upper, false, true);    }  | < SYM_GT > lower = date_time_value()    {      i = new Interval(lower, null, false, false);    }  | < SYM_GE > lower = date_time_value()    {      i = new Interval(lower, null, true, false);    }  )  < SYM_INTERVAL_DELIM >  {    return i;  }}DvDuration duration_value() :{  Token t;}{  t = < V_ISO8601_DURATION >  {    return DvDuration.getInstance(t.image);  }}List duration_list_value() :{  List list = new ArrayList();  DvDuration d;}{  d = duration_value()  {    list.add(d);  }  (    ","    (      d = duration_value()      {        list.add(d);      }    | < SYM_LIST_CONTINUE >    )  )+  {    return list;  }}Interval duration_interval_value() :{  Interval i;  DvDuration lower = null;  DvDuration upper = null;}{  < SYM_INTERVAL_DELIM >  (    lower = duration_value()    {      upper = lower;    }    [ < SYM_ELLIPSIS > upper = duration_value() ]    {      i = new Interval(lower, upper, true, true);    }  | < SYM_LT > upper = duration_value()    {      i = new Interval(null, upper, false, false);    }  | < SYM_LE > upper = duration_value()    {      i = new Interval(null, upper, false, true);    }  | < SYM_GT > lower = duration_value()    {      i = new Interval(lower, null, false, false);    }  | < SYM_GE > lower = duration_value()    {      i = new Interval(lower, null, true, false);    }  )  < SYM_INTERVAL_DELIM >  {    return i;  }}String term_code() :{  Token t;}{  t = < V_QUALIFIED_TERM_CODE_REF >  {    return t.image;  }}List < String > term_code_list_value() :{  List list = new ArrayList();  String term;}{  term = term_code()  {    list.add(term);  }  (    ","    (      term = term_code()    )    {      list.add(term);    }  | < SYM_LIST_CONTINUE >  )+  {    return list;  }}List < String > string_list() :{  List < String > list = new ArrayList();  String value = null;}{  (    < SYM_L_BRACKET > string_value() < SYM_R_BRACKET > < SYM_EQ > < SYM_LT > value = string_value() < SYM_GT >    {      list.add(value);    }  )*  {    return list;  }}String type_identifier() :{  Token t;  String type;}{  < SYM_L_PARENTHESIS >  (    t = < V_TYPE_IDENTIFIER >    {      type = t.image;    }  | t = < V_GENERIC_TYPE_IDENTIFIER >    {      type = t.image;    }  )  < SYM_R_PARENTHESIS >  {    return type;  }}String attribute_identifier() :{  Token t;}{  t = < V_ATTRIBUTE_IDENTIFIER >  {    return t.image;  }}